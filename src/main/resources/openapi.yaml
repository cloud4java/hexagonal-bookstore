openapi: 3.0.1
info:
  title: Book Store API
  description: REST API for managing books in a hexagonal architecture
  version: "1.0"
  contact:
    name: Development Team
    email: dev@example.com

servers:
  - url: /
    description: Local Development Server

tags:
  - name: Book Management
    description: APIs for managing books

paths:
  /api/books:
    post:
      tags:
        - Book Management
      summary: Create a new book
      description: Creates a new book entry in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
      responses:
        '200':
          description: Book successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
        '400':
          description: Invalid input
    
    get:
      tags:
        - Book Management
      summary: Get all books
      description: Retrieves all books in the system
      responses:
        '200':
          description: List of all books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponseDTO'

  /api/books/{id}:
    get:
      tags:
        - Book Management
      summary: Get a book by ID
      description: Retrieves a book by its ID
      parameters:
        - name: id
          in: path
          description: ID of the book to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
        '404':
          description: Book not found

    put:
      tags:
        - Book Management
      summary: Update a book
      description: Updates an existing book
      parameters:
        - name: id
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
      responses:
        '200':
          description: Book successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
        '400':
          description: Invalid input
        '404':
          description: Book not found

    delete:
      tags:
        - Book Management
      summary: Delete a book
      description: Deletes an existing book
      parameters:
        - name: id
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book successfully deleted
        '404':
          description: Book not found

components:
  schemas:
    BookRequestDTO:
      type: object
      required:
        - title
        - author
        - price
      properties:
        title:
          type: string
          description: The title of the book
        author:
          type: string
          description: The author of the book
        price:
          type: number
          format: double
          description: The price of the book
    
    BookResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the book
        title:
          type: string
          description: The title of the book
        author:
          type: string
          description: The author of the book
        price:
          type: number
          format: double
          description: The price of the book
